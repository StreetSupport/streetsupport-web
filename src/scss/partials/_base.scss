// Apply a natural box layout model to all elements, but allowing components to change
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

html {
  font-size: 100%;

  -webkit-font-smoothing: antialiased;
          font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

body {
  font-size: $base-font-size;
}

@include mq($until: m) {
  html,
  body {
    &.is-active {
      height: 100vh;
      overflow: hidden;
      position: relative;
    }
  }
}

// Make sure embeds and iframes fit their responsive containers
embed,
iframe,
object {
  max-width: 100%;
}

// Responsive images
img {
  max-width: 100%;
  height: auto;
}

::selection {
  background: #a8d1ff;
  text-shadow: none;
}

a,
button {
  touch-action: manipulation;
}

.hide {
  display: none !important;
}

/*
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

.visually-hidden, // awesomeplete
.hide-screen {
  position: absolute;

  overflow: hidden;
  clip: rect(0 0 0 0);

  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;

  border: 0;
}

/*
 * Extends the .visuallyhidden class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

.hide-screen.focusable:active,
.hide-screen.focusable:focus {
  position: static;

  overflow: visible;
  clip: auto;

  width: auto;
  height: auto;
  margin: 0;
}
